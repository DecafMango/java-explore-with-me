{
	"info": {
		"_postman_id": "10baaf50-4dcc-4721-a9dd-8e7d2f1c736f",
		"name": "Test Explore With Me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27296065"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user1\",\n    \"email\": \"user1@yandex.ru\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"pm.expect(target).to.have.property('email');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');",
									"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"user2\",\n    \"email\": \"user2@yandex.ru\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/users",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"users"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса успеха и тело в формате json\", () => {",
							"    pm.response.to.be.success;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Categories",
			"item": [
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"const target = pm.response.json();",
									"",
									"pm.test(\"Категория должна содержать поля: id, name\", function () {",
									"pm.expect(target).to.have.property('id');",
									"pm.expect(target).to.have.property('name');",
									"});",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"category\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/categories",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"categories"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса успеха и тело в формате json\", () => {",
							"    pm.response.to.be.success;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "Create Event1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Ответ должен содержать код статуса 201 и данные в формате json', function () {",
									"    pm.response.to.have.status(201);",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"const source = JSON.parse(pm.request.body.raw);",
									"",
									"const target = pm.response.json();",
									"",
									"pm.test('Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration', function () {",
									"    pm.expect(target).to.have.property('id');",
									"    pm.expect(target).to.have.property('title');",
									"    pm.expect(target).to.have.property('annotation');",
									"    pm.expect(target).to.have.property('category');",
									"    pm.expect(target).to.have.property('paid');",
									"    pm.expect(target).to.have.property('eventDate');",
									"    pm.expect(target).to.have.property('initiator');",
									"    pm.expect(target).to.have.property('description');",
									"    pm.expect(target).to.have.property('participantLimit');",
									"    pm.expect(target).to.have.property('state');",
									"    pm.expect(target).to.have.property('createdOn');",
									"    pm.expect(target).to.have.property('location');",
									"    pm.expect(target).to.have.property('requestModeration');",
									"})",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.id).to.not.be.null;",
									"    pm.expect(target.title).to.equal(source.title, 'Название события должно соответствовать названию события в запросе');",
									"    pm.expect(target.annotation).to.equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');",
									"    pm.expect(target.paid).to.equal(source.paid, 'Стоимость события должна соответствовать стоимости события в запросе');",
									"    pm.expect(target.eventDate).to.equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');",
									"    pm.expect(target.description).to.equal(source.description, 'Описание события должно соответствовать описание события в запросе');",
									"    pm.expect(target.location.lat).to.equal(source.location.lat, 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');",
									"    pm.expect(target.location.lon).to.equal(source.location.lon, 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');",
									"    pm.expect(target.requestModeration).to.equal(source.requestModeration, 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"annotation for this events\",\n    \"category\": 121,\n    \"description\": \"description for this event\",\n    \"eventDate\": \"2030-12-31 12:12:12\",\n    \"location\": {\n        \"lat\": 1,\n        \"lon\": 1\n    },\n    \"paid\": false,\n    \"participationLimit\": 0,\n    \"requestModeration\": false,\n    \"title\": \"title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/136/events",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Event2",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"annotation\": \"annotation for this events\",\n    \"category\": 121,\n    \"description\": \"description for this event\",\n    \"eventDate\": \"2030-12-31 12:12:12\",\n    \"location\": {\n        \"lat\": 1,\n        \"lon\": 1\n    },\n    \"paid\": false,\n    \"participationLimit\": 0,\n    \"requestModeration\": false,\n    \"title\": \"title\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/137/events",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"137",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Publish Event1",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"stateAction\": \"PUBLISH_EVENT\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/admin/events/106",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"events",
								"106"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса успеха и тело в формате json\", () => {",
							"    pm.response.to.be.success;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"})"
						]
					}
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/9999/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"9999",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment To Non-Existent Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": 9999,\n    \"text\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/1/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Request With Blank Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 400 и тело в формате json\", function() {",
									"    pm.response.to.be.badRequest;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": 1,\n    \"text\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/1/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Event Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/comments/9999",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Non-Existent Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/comments/9999",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Non-Existent Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/1/comments/9999",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Non-Existent Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.notFound;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/1/comments/9999",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"1",
								"comments",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment From Event Initiator (User1)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"let source = JSON.parse(pm.request.body);",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля 'id', 'text', 'createdOn', 'commentator'\", function () {",
									"     pm.expect(pm.response.json()).to.have.property('id');",
									"     pm.expect(pm.response.json()).to.have.property('text');",
									"     pm.expect(pm.response.json()).to.have.property('createdOn');",
									"     pm.expect(pm.response.json()).to.have.property('commentator');",
									"    });",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.text).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": 106,\n    \"text\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/136/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment From User2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"let source = JSON.parse(pm.request.body);",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля 'id', 'text', 'createdOn', 'commentator'\", function () {",
									"     pm.expect(pm.response.json()).to.have.property('id');",
									"     pm.expect(pm.response.json()).to.have.property('text');",
									"     pm.expect(pm.response.json()).to.have.property('createdOn');",
									"     pm.expect(pm.response.json()).to.have.property('commentator');",
									"    });",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.text).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": 106,\n    \"text\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/137/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"137",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Comment To Not Published Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 409 и тело в формате json\", function() {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"event\": 107,\n    \"text\": \"text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/137/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"137",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User1 Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {",
									"    pm.response.to.be.ok;    ",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Комментарии должны содержать поля id, text, createdOn, commentator\", function() {",
									"    pm.expect(target[0]).to.have.property(\"id\");",
									"    pm.expect(target[0]).to.have.property(\"text\");",
									"    pm.expect(target[0]).to.have.property(\"createdOn\");",
									"    pm.expect(target[0]).to.have.property(\"commentator\");",
									"})",
									"",
									"pm.test(\"Поля комментариев должны иметь определенные значения\", function() {",
									"    pm.expect(target[0].text).equal(\"text\");",
									"    ",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/136/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Comment1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 200 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"let source = JSON.parse(pm.request.body);",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Комментарий должен содержать поля 'id', 'text', 'createdOn', 'commentator'\", function () {",
									"     pm.expect(pm.response.json()).to.have.property('id');",
									"     pm.expect(pm.response.json()).to.have.property('text');",
									"     pm.expect(pm.response.json()).to.have.property('createdOn');",
									"     pm.expect(pm.response.json()).to.have.property('commentator');",
									"    });",
									"",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {",
									"    pm.expect(target.text).to.not.be.null;",
									"    pm.expect(source.text).equal(target.text);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"new text\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/136/comments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch Comment By Blank Text",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 404 и тело в формате json\", function() {",
									"    pm.response.to.be.badRequest;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"text\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:8080/users/136/comments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment By Non Commentator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 409 и тело в формате json\", function() {",
									"    pm.response.to.be.error;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/137/comments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"137",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment By Event Initiator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 204 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/136/comments/2",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment By Commentator",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 204 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"})",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/136/comments/1",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User's1 comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Список комментариев должен быть пустым\", function () {",
									"     pm.expect(target[0]).equal(undefined);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/136/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"136",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User's2 comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код 201 и тело в формате json\", function() {",
									"    pm.response.to.be.success;",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"})",
									"",
									"let target = pm.response.json();",
									"",
									"pm.test(\"Список комментариев должен быть пустым\", function () {",
									"     pm.expect(target[0]).equal(undefined);",
									"    });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "localhost:8080/users/137/comments",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"users",
								"137",
								"comments"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}